package com.web.order.controller;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.xml.ws.Response;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

import com.alibaba.fastjson.JSONObject;
import com.alipay.api.AlipayApiException;
import com.alipay.api.AlipayClient;
import com.alipay.api.DefaultAlipayClient;
import com.alipay.api.internal.util.AlipaySignature;
import com.alipay.api.internal.util.AlipayUtils;
import com.alipay.api.request.AlipayTradePagePayRequest;
import com.alipay.api.request.AlipayTradeQueryRequest;
import com.alipay.api.response.AlipayTradeQueryResponse;
import com.hontek.comm.alipay.AlipayConfig;
import com.hontek.comm.alipay.AlipayUtil;
import com.hontek.comm.base.BaseController;
import com.hontek.comm.model.Grid;
import com.hontek.comm.util.SearchMapUtil;
import com.hontek.comm.util.SearchPageUtil;
import com.hontek.goods.model.TbGoods;
import com.hontek.goods.service.GoodsService;
import com.hontek.member.dao.MemberAddrDao;
import com.hontek.member.dao.ShopDao;
import com.hontek.member.model.TbMember;
import com.hontek.member.model.TbMemberAddr;
import com.hontek.member.model.TbMemberUser;
import com.hontek.member.model.TbShop;
import com.hontek.member.service.ShopService;
import com.hontek.order.domain.BuildOrdersTDO;
import com.hontek.order.domain.TbOrderPayTDO;
import com.hontek.order.model.TbLogis;
import com.hontek.order.model.TbOrder;
import com.hontek.order.model.TbOrderDetail;
import com.hontek.order.model.TbPayment;
import com.hontek.order.service.LogisService;
import com.hontek.order.service.OrderDetailService;
import com.hontek.order.service.OrderService;

/**
 * @ClassName: OrderController
 * @Description: TODO(前台订单控制器类)
 * @date 2015-6-26 下午05:30:07
 * @author qql
 * @version 1.0
 */
@Controller
@RequestMapping("weborder")
public class WebOrderController extends BaseController{

	@Autowired
	private OrderService orderService;
	
	@Autowired
	private ShopDao shopDao ;
		
	@Autowired
	private LogisService logisService ;

	@Autowired
	private MemberAddrDao memberAddrDao ;
	
	private Logger logger = Logger.getLogger(this.getClass());
	
	/*public void setOrderService(OrderService orderService) {
		this.orderService = orderService;
	}*/

	/**
	 * 分页查询
	 * @param order
	 * @param page
	 * @param rows
	 * @param response
	 */
	@RequestMapping("page")
	public void findPagerList(HttpServletResponse response,SearchPageUtil page ,HttpSession session ){
		TbMemberUser tbMember = (TbMemberUser)session.getAttribute("memberUser");
		if(tbMember != null) {
			Map<String, Object> params = page.getParams();
			params.put("memberIdBuy", tbMember.getMemberId());
			page.setParams(params);
			Grid dataGrid = orderService.findOrderListWithGoodsDetail(page);
			writeJson2View(dataGrid, response);
		}
	}
	
	@RequestMapping("pageBySale")
	public void findPagerListBySale(HttpServletResponse response,SearchPageUtil page ,HttpSession session ){
		if(page!=null){
			TbMember member = getLoginWebUser(session);
			page.getParams().put("memberIdSale", member.getMemberId());
		}
		Grid dataGrid = orderService.findOrderListWithGoodsDetail(page);
		writeJson2View(dataGrid, response);

	}
	


	/**
	 * 添加
	 * @param order
	 * @param response
	 */
	@RequestMapping("add")
	public void addOrder(TbOrder order,HttpServletResponse response){
		writeJson2View(orderService.addOrder(order), response);
	}
	
	/**
	 * 修改
	 * @param order
	 * @param response
	 */
	@RequestMapping("update")
	public void updateOrder(TbOrder order,HttpServletResponse response){
		writeJson2View(orderService.updateOrder(order), response);
	}
	
	/**
	 * 订单状态  1：交易中 2：买家取消 3：卖家无效 4：交易完成 5：退货 
	 * @param order
	 * @param response
	 */
	@RequestMapping("orderState")
	public void orderState(Integer orderId,String state,HttpServletResponse response){
		TbOrder order = orderService.findOrderByOrderId(orderId);
		order.setOrderState(state);
		writeJson2View(orderService.orderState(order), response);
	}
	/**
	 * 发货状态 1:待发货 2：已发货 3：收货确认 4：拒收
	 * @param order
	 * @param response
	 */
	@RequestMapping("sendState")
	public void sendState(Integer orderId,String state,HttpServletResponse response){
		TbOrder order = orderService.findOrderByOrderId(orderId);
		order.setSendState(state);
		writeJson2View(orderService.orderState(order), response);
	}
	/**
	 * 支付状态  1待付款 2：已付款 
	 * @param order
	 * @param response
	 */
	@RequestMapping("payState")
	public void payState(Integer orderId,String state,HttpServletResponse response){
		TbOrder order = orderService.findOrderByOrderId(orderId);
		order.setPayState(state);
		writeJson2View(orderService.orderState(order), response);
	}
	
	/**
	 * 删除
	 * @param ids
	 * @param response
	 */
	@RequestMapping("delete")
	public void deleteOrder(String ids,HttpServletResponse response){
		writeJson2View(orderService.deleteOrder(ids), response);
	}
	
	/**
	 * 生成订单
	 * buildOrdersListStr参数格式
	 * [
	*	    {
	*	        "shopId": 1,
	*	        "addressId": 3,
	*	        "buyRemark": "fsdafsdf",
	*			"orderType": "1",
	*	        "list": [
	*	            {
	*	                "goodsId": 111,
	*	                "goodsCount": 3,
	*	                "modelId": 5,
	*	                "cartId": 9
	*	            }
	*	        ]
	*	    }
	*	]
	 * @param modelAndView
	 * @return
	 */
	@RequestMapping("buildOrders")
	public ModelAndView buildOrders (ModelAndView modelAndView , String buildOrdersListStr,String paytype,HttpSession session,HttpServletResponse response){
		List<BuildOrdersTDO> list = null ;
		
		try {
			list = JSONObject.parseArray(buildOrdersListStr, BuildOrdersTDO.class);
			TbMemberUser tbMember = (TbMemberUser)session.getAttribute("memberUser");
			
			//数据校验
			for(BuildOrdersTDO buildOrdersTDO : list){
				if(buildOrdersTDO != null){
					//效验shopId
					if(buildOrdersTDO.getShopId() != null && !"".equals(buildOrdersTDO.getShopId()) ){
						TbShop tbShop = shopDao.findById(buildOrdersTDO.getShopId());
						if(tbShop ==null || "".equals(tbShop)){
							logger.error("生成订单：店铺不存在！");
							modelAndView.setViewName("buy/common/500");
							return modelAndView ;
						}
						
					}else{
						logger.error("生成订单：shopID为空！");
						modelAndView.setViewName("buy/common/500");
						return modelAndView ;
					}
					
					//效验addressId
					if(buildOrdersTDO.getAddressId() != null && !"".equals(buildOrdersTDO.getAddressId()) ){
						TbMemberAddr tbMemberAddr = memberAddrDao.findById(buildOrdersTDO.getAddressId());
						if(tbMemberAddr ==null || "".equals(tbMemberAddr)){
							logger.error("生成订单：地址不存在！");
							modelAndView.setViewName("buy/common/500");
							return modelAndView ;
						}
						
					}else{
						logger.error("生成订单：addressId为空！");
						modelAndView.setViewName("buy/common/500");
						return modelAndView ;
					}
					
					
					//效验list
					if(buildOrdersTDO.getList() != null && !"".equals(buildOrdersTDO.getList())){
						//这个效验，请求量有点多，留后期决定
						//for(TbOrderDetail tbOrderDetail : buildOrdersTDO.getList()){
							//效验goodsId
							
							//效验goodsCount
							
							//效验modelId
							
							//效验cartId
						//}
						
					}else{
						logger.error("只有商铺没有商品！");
						modelAndView.setViewName("buy/common/500");
						return modelAndView ;
					}
					
				}else{
					logger.error("数据结构不正确！");
					modelAndView.setViewName("buy/common/500");
					return modelAndView ;
				}
			}
			//数据校验结束
			
			TbOrderPayTDO tbOrderPayTDO =  orderService.buildOrders(list ,tbMember.getMemberId());
			modelAndView.addObject("tbOrderPayTDO",tbOrderPayTDO);
			if("1".equals(paytype)){//微信支付
				return null;
			}
			else if("2".equals(paytype)){//支付宝
				return toAlipay(modelAndView,tbOrderPayTDO,list,response);
			}
			else{
				logger.error("支付方式不正确！");
				modelAndView.setViewName("buy/common/500");
				return modelAndView ;
			}
			//modelAndView.setViewName("buy/custom/pay");				
		} catch (Exception e) {
			// TODO: handle exception
			logger.error("数据结构不正确！"+e.getMessage());
			modelAndView.setViewName("buy/common/500");
			return modelAndView ;
		}
		//return modelAndView ;
	}
	
	/**
	 * 一键支付
	 * @param modelAndView
	 * @param orderId
	 * @param session
	 * @return
	 */
	@RequestMapping("toPayHtml")
	public ModelAndView toPayHtml(ModelAndView modelAndView , Integer orderId ,HttpSession session){
		if(orderId == null || orderId == -1){
			modelAndView.addObject("msg", "orderId不能为null");
			modelAndView.setViewName("buy/custom/order");
			return modelAndView;
		}else{
			TbOrder tbOrder = orderService.findOrderByOrderId(orderId);
			
			List<Integer> list = new ArrayList<>();
			list.add(tbOrder.getOrderId());
			
			TbOrderPayTDO tbOrderPayTDO = new TbOrderPayTDO(tbOrder.getOrderAmount(),list,list.size());
			
			modelAndView.addObject("tbOrderPayTDO",tbOrderPayTDO);
			modelAndView.setViewName("buy/custom/pay");
			return modelAndView ;
		}
	}
	/*
	 * 会员中心支付宝
	 */
	@RequestMapping("toMemberAlipay")
	public ModelAndView toMemberAlipay(ModelAndView modelAndView,Integer orderId ,HttpSession session,HttpServletResponse response){
		try {
			if(orderId == null || orderId == -1){
				modelAndView.addObject("msg", "orderId不能为null");
				modelAndView.setViewName("buy/custom/order");
			}else{
				TbOrder tbOrder = orderService.findOrderByOrderId(orderId);	
				if(tbOrder!=null){	
					//商户订单号，商户网站订单系统中唯一订单号，必填
					String result = orderService.toMemberAlipay(tbOrder);
					//跳转到支付宝
					response.setCharacterEncoding("utf-8");
					response.setContentType("text/html;charset=utf-8");
					response.getWriter().println(result);
					modelAndView = null;
				}
				else{
					modelAndView.addObject("msg", "工单不存在");
					modelAndView.setViewName("buy/custom/order");
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			modelAndView.addObject("msg", "出现错误");
			modelAndView.setViewName("buy/custom/order");
		}
		return modelAndView;
	}
	
	/*
	 * 前台支付宝 支付
	 * orderLists ：工单列表，totalAmount 订单总价
	 */
	public ModelAndView toAlipay(ModelAndView modelAndView,TbOrderPayTDO tbOrderPayTDO,List<BuildOrdersTDO> list,HttpServletResponse response){
		// 获得初始化的AlipayClient
		try {
			String result = orderService.toAlipay(tbOrderPayTDO, list);
			// 跳转到支付宝
			if (result != null && !"".equals(result)) {
				response.setCharacterEncoding("utf-8");
				response.setContentType("text/html;charset=utf-8");
				response.getWriter().println(result);
				modelAndView = null;
			} else {
				modelAndView.setViewName("buy/common/500");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			modelAndView.setViewName("buy/common/500");
		} finally {
			return modelAndView;
		}
	}
	
	
	
	/**
	 * 付款成功回调
	 */
	@RequestMapping("paySuccess")
	public void paySuccess(Integer[] orderIds){
		orderService.paySuccess(orderIds);
	}

	/*
	 * 支付宝回调方法
	 */
	@RequestMapping("alipayReturn")
	public ModelAndView alipayReturn(ModelAndView modelAndView,HttpServletRequest request){
		try {
			//付款结果
			boolean payResult = false;
			String showOrderId = "";
			String total_amount = "";
			//获取支付宝反馈信息
			Map<String, String> resultMap = AlipayUtil.checkResult(request);
			//——请在这里编写您的程序（以下代码仅作参考）——
			TbOrder order = new TbOrder();
			if(resultMap!=null) {
				order = orderService.handleResult(resultMap);
				if(order!=null&&"2".equals(order.getPayState())){
					payResult = true;
				}
				showOrderId = order.getOrderId()+"";
				total_amount = order.getOrderAmount();
			}else {
				logger.error("验签失败");
			}	
			modelAndView.getModel().put("total_amount",total_amount);//付款金额
			modelAndView.getModel().put("order_id",showOrderId);//订单编号
			modelAndView.getModel().put("payResult",payResult);//是否成功付款
			TbLogis logis = logisService.findByOrderId(showOrderId);
			if(logis!=null){
				String addrIdStr = logis.getAddrId();
				if(addrIdStr!=null&&!"".equals(addrIdStr)){
					Integer addrId = Integer.parseInt(addrIdStr);
					TbMemberAddr tbMemberAddr = memberAddrDao.findById(addrId);
					if(tbMemberAddr!=null){
						modelAndView.getModel().put("tbMemberAddr", tbMemberAddr);
					}
				}
				
			}
			if(payResult){
				modelAndView.setViewName("buy/custom/paysuccess");
			}
			else{
				modelAndView.setViewName("buy/custom/payfail");
			}
		
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			modelAndView.setViewName("buy/custom/payfail");
		}
		finally{
			return modelAndView;
		}
	}
	/*
	 * 支付宝异步回调接口
	 */
	@RequestMapping("alipayNotify")
	public void alipayNotify(HttpServletRequest request){
		//验证返回结果
		Map<String, String> resultMap = AlipayUtil.checkResult(request);

		TbOrder order = orderService.handleResult(resultMap);//处理结果
		
		logger.info("异步回调结果==========="+order.getPayState());
	}	
}
